{
	// Place your code 工作区 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"define fo": {
		"prefix": "dfo",
		"body": [
			"#define fo(x) freopen(#x\".in\", \"r\", stdin); freopen(#x\".out\", \"w\", stdout);",
		],
	},
	"use local defined fo": {
		"prefix": "fo",
		"body": [
			"#ifndef LOCAL",
			"\tfo($1)",
			"#endif",
		],
	},
	"use local defined fop": {
		"prefix": "fp",
		"body": [
			"#ifndef LOCAL",
			"\tfop",
			"#endif",
		],
	},
	"init": {
		"prefix": "init",
		"body": [
			"#include <bits/stdc++.h>",
			"#define int long long",
			"#define endl \"\\n\"",
			"#define spc \" \" ",
			"#define fo(x) freopen(#x\".in\", \"r\", stdin); freopen(#x\".out\", \"w\", stdout);",
			"#define Problem ${problem}",
			"#define fop fo(${problem})",
			"",
			"using namespace std;",
			"",
			"namespace Problem {",
			"template <typename t>",
			"ostream &operator<<(ostream &out, const vector<t> &A) {",
			"    for (const t &i : A) out << i << spc;",
			"    return out;",
			"}",
			"",
			"template <typename t>",
			"void print(const t &x, int l = 0, int r = 0) {",
			"    cout << x << spc;",
			"}",
			"",
			"template <typename t>",
			"void print(const vector<t> &A, int l = 0, int r = 0) {",
			"    for (int i = l; i < r; i++) {",
			"    print(A[i], l, r);",
			"    }",
			"    cout << endl;",
			"}",
			"",
			"template <typename t>",
			"istream &operator>>(istream &in, vector<t> &A) {",
			"    for (t &i : A) in >> i;",
			"    return in;",
			"}\n",
			"template<typename t>",
			"void scan(t &x, int l = 0, int r = 0) {",
			"    cin >> x;",
			"}\n",
			"template<typename t>",
			"void scan(vector<t> &A, int l = 0, int r = 0) {",
			"    for (int i = l; i < r; i++) {",
			"    scan(A[i], l, r);",
			"    }",
			"}\n",
			"template<typename it>",
			"void assign(vector<int> &a, it p) {",
			"    a.assign(*p, 0);",
			"}",
			"",
			"template<typename T, typename it>",
			"void assign(vector<T> &a, it p) {",
			"    T t;",
			"    assign(t, p + 1);",
			"    a.assign(*p, t);",
			"}",
			"",
			"template<typename T>",
			"void assign(vector<T> &a, const vector<int> &p) {",
			"    assign(a, p.begin());",
			"}",
			"\nusing PII = pair<int, int>;\n",
			"istream &operator>>(istream &in, PII &a) {",
			"    return in >> a.first >> a.second;",
			"}\n",
			"ostream &operator<<(ostream &out, const PII &a) {",
			"    return out << a.first << spc << a.second << spc;",
			"}\n",
			"template<typename T> vector<T> operator+(const vector<T> &A, const vector<T> &B) {",
			"    int n = A.size(), m = B.size(), k = max(m, n);",
			"    vector<T> C(k, 0);",
			"    for (int i = 0; i < k; i++) {",
			"        if (i < n) C[i] += A[i];",
			"        if (i < m) C[i] += B[i];",
			"    }",
			"    return C;",
			"}",
			"",
			"template<typename T> vector<T> operator+=(vector<T> &A, const vector<T> &B) { return A = A + B; }",
			"",
			"void main() {",
			"    $0",
			"}",
			"}\n",
			"signed main() {",
			"    ios::sync_with_stdio(0);",
			"    cin.tie(0); cout.tie(0);",
			"    Problem::main();",
			"    return 0;",
			"}"
		],
		"description": "init"
	}
}